# When changing a sign or adding more signs, this is the ONLY
# file that should be throughly checked and edited.
# Provides many helpful utility functions 

# Returns the ID of a sign from its given location
function getIDOfSign(block: block) :: integer:
    set {_id} to 0

    # Shootout 1v1 Duels
    set {_startLoc} to location(1, 61, 7, "Shootout")
    loop 3 times:
        return {_id} if block at {_startLoc} is {_block}
        remove 1 from x-coordinate of {_startLoc}
        add 1 to {_id}
    
    # Shootout 2v2 Duels
    set {_startLoc} to location(-1, 61, -7, "Shootout")
    loop 3 times:
        return {_id} if block at {_startLoc} is {_block}
        add 1 to x-coordinate of {_startLoc}
        add 1 to {_id}
    
    return -1 # Couldn't find ID of sign, it's a fake game

# Returns a sign location by its given ID
function getSignByID(id: integer) :: location: 

    # Shootout 1v1 Duels
    set {_startLoc} to location(1, 61, 7)
    loop 3 times:
        return {_startLoc} if getIDOfSign(block at {_startLoc}) is {_id}
        remove 1 from x-coordinate of {_startLoc}
    
    # Shootout 2v2 Duels
    set {_startLoc} to location(-1, 61, -7)
    loop 3 times:
        return {_startLoc} if getIDOfSign(block at {_startLoc}) is {_id}
        add 1 to x-coordinate of {_startLoc}
    
    return location(0, 57, 0) # Couldn't find ID, set to default sign

# HOW MAPS ARE ORGANIZED:
# Maps start at the z-center of 0 and add 100 to their Z per ID
# Different types of maps for different game types add 200 to their X
# Shootout 1v1 ID:0 starts at location(201, 60, 0.5) and Shootout 1v1 ID:1 at location(201, 60, 100.5)
# Shootout 2v2 starts at location(400.5, 60, 0.5) then location(400.5, 60, 100.5) and so on

function arenaSpawnpoints(id: integer) :: locations:
    if {_id} <= 2: # 0, 1, 2 are all 1v1 duels
        # Returns only 2 spawn locations
        add location(188.5, 88, (0.5 + (100 * {_id})), "Shootout", -90) to {_locs::*}
        add location(213.5, 88, (0.5 + (100 * {_id})), "Shootout", 90) to {_locs::*}
    else if {_id} <= 5: # 3, 4, 5 are all 2v2 duels
        set {_calc} to {_id} - 3 # The number 3 are the total number of 1v1 maps
        add location(380.5, 95, (0.5 + (100 * {_calc})), "Shootout", -90) to {_locs::*} # Team 1
        add location(420.5, 95, (0.5 + (100 * {_calc})), "Shootout", 90) to {_locs::*} # Team 2
        add location(380.5, 85, (0.5 + (100 * {_calc})), "Shootout", -90) to {_locs::*} # Team 1
        add location(420.5, 85, (0.5 + (100 * {_calc})), "Shootout", 90) to {_locs::*} # Team 2
        
    return {_locs::*}

# Returns a single spawnpoint at the center of the map for spectators
function arenaSpawn(id: integer) :: location:   
    if {_id} <= 2: # 0, 1, 2 are all 1v1 duels
        return location(200, 75, (0.5 + (100 * {_id})), "Shootout", 90, 90) # 1v1 Shootout
    else if {_id} <= 5: # 3, 4, 5 are all 2v2 duels
        set {_calc} to {_id} - 3 # The number 3 are the total number of 1v1 maps
        return location(400, 100, (0.5 + (100 * {_calc}))) # 2v2 Shootout

# Updates sign text dynamically
function updateSign(sign: block, id: integer):
    if {_id} <= 2: # 0, 1, 2 are all 1v1 duels
        set {_text} to "Shootout 1v1"
    else if {_id} <= 5: # 3, 4, 5 are all 2v2 duels
        set {_text} to "Shootout 2v2"
    set line 2 of {_sign} to "&6&l%{_text}%:"

    if {match::%{_id}%::status} is not set:
        set {_queuedPlayers} to 0
        loop all players:
            {game::%loop-player%::id} is {_id}
            add 1 to {_queuedPlayers}
        set line 3 of {_sign} to "&c&lᴊᴏɪɴ ǫᴜᴇᴜᴇ" if {_queuedPlayers} is 0
        set line 3 of {_sign} to "&c&l%{_queuedPlayers}% ɪɴ ǫᴜᴇᴜᴇ" if {_queuedPlayers} is not 0
    else if {match::%{_id}%::status} is "Starting":
        set line 3 of {_sign} to "&c&lѕᴛᴀʀᴛɪɴɢ..."
    else if {match::%{_id}%::status} is "Running":
        set line 3 of {_sign} to "&c&lѕᴘᴇᴄᴛᴀᴛᴇ"
    else if {match::%{_id}%::status} is "Ending":
        set line 3 of {_sign} to "&c&lᴇɴᴅɪɴɢ..."
    else:
        set line 3 of {_sign} to "&c&lUnknown Status:"
        set line 3 of {_sign} to "&c&l%{match::%{_id}%::status}%"

function createBounds(): # This is ran on launch and should make bounds for each map
    set {_id} and {_delBound} and {_calc} to 0
    
    loop 3 times: # Loops all the Shootout1v1 maps:
        create temporary bound with id "Map%{_id}%" within location(174, 100, -17 + (100 * {_id}), "Shootout") and location(224, 60, 15 + (100 * {_id}), "Shootout")
        add 1 to {_id}
    
    loop 3 times: # Loops all the Shootout2v2 maps:
        create temporary bound with id "Map%{_id}%" within location(369, 57, -19 + (100 * {_calc}), "Shootout") and location(432, 118, 15 + (100 * {_calc}), "Shootout")
        add 1 to {_id} and {_calc}

function resetSigns(): # Resets all sign text (run on server start)
    set {_id} to 0
    loop 6 times: # Total amount of maps
        updateSign(block at getSignByID({_id}), {_id})
        add 1 to {_id}

on bound exit: 
    id of event-bound contains "Map"
    gamemode of player is spectator
    cancel event
    sendActionbarError(player, "Don't leave the arena!")